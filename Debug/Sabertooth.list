
Sabertooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005840  08005840  00015840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c4  080058c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058cc  080058cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  080058e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080058e0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ec9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4a  00000000  00000000  00039f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0003c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026163  00000000  00000000  0003e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a45  00000000  00000000  000644eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1500  00000000  00000000  00075f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  00157484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005828 	.word	0x08005828

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005828 	.word	0x08005828

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_DMA_Init+0x4c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <MX_DMA_Init+0x4c>)
 800050c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_DMA_Init+0x4c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	200d      	movs	r0, #13
 8000524:	f001 fce7 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000528:	200d      	movs	r0, #13
 800052a:	f001 fd00 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	200f      	movs	r0, #15
 8000534:	f001 fcdf 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000538:	200f      	movs	r0, #15
 800053a:	f001 fcf8 	bl	8001f2e <HAL_NVIC_EnableIRQ>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a2c      	ldr	r2, [pc, #176]	; (800061c <MX_GPIO_Init+0xd0>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a25      	ldr	r2, [pc, #148]	; (800061c <MX_GPIO_Init+0xd0>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1e      	ldr	r2, [pc, #120]	; (800061c <MX_GPIO_Init+0xd0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_GPIO_Init+0xd0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_GPIO_Init+0xd0>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_GPIO_Init+0xd0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <MX_GPIO_Init+0xd4>)
 80005d8:	f002 fa5a 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_GPIO_Init+0xd8>)
 80005f4:	f002 f8b8 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f8:	2320      	movs	r3, #32
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_GPIO_Init+0xd4>)
 8000610:	f002 f8aa 	bl	8002768 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	40020800 	.word	0x40020800

08000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>:

class PWM{
	public:
		PWM() = delete;

		PWM(TIM_HandleTypeDef* tim_,uint32_t ch_,uint16_t pTimeReload,int16_t pre_,timMode MyTim,bool interrupt = false):
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	807b      	strh	r3, [r7, #2]
		tim(tim_)
		,ch(ch_)
		,mTimeReload(pTimeReload)
		,MasterClock(timMode::APB1 == MyTim ? HAL_RCC_GetPCLK1Freq() : HAL_RCC_GetPCLK2Freq())
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb+0x70>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	887a      	ldrh	r2, [r7, #2]
 800064c:	819a      	strh	r2, [r3, #12]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb+0x34>
 8000654:	f002 fb28 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8000658:	4603      	mov	r3, r0
 800065a:	e002      	b.n	8000662 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb+0x3a>
 800065c:	f002 fb38 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8000660:	4603      	mov	r3, r0
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	6113      	str	r3, [r2, #16]
		{
			setPiriod(pTimeReload);
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f8cf 	bl	800080e <_ZN3PWM9setPiriodEt>
			setPrescaler(pre_);
 8000670:	8b3b      	ldrh	r3, [r7, #24]
 8000672:	4619      	mov	r1, r3
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f8b5 	bl	80007e4 <_ZN3PWM12setPrescalerEt>
			if(interrupt) HAL_TIM_Base_Start_IT(tim);
 800067a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb+0x64>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4618      	mov	r0, r3
 8000688:	f002 ffd6 	bl	8003638 <HAL_TIM_Base_Start_IT>
		};
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	080058a0 	.word	0x080058a0

0800069c <_ZN3PWM7triggerEb>:

		inline virtual void trigger(bool status){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
			status == true ? HAL_TIM_PWM_Start_IT(tim,ch): HAL_TIM_PWM_Stop(tim,ch);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d108      	bne.n	80006c0 <_ZN3PWM7triggerEb+0x24>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4610      	mov	r0, r2
 80006ba:	f003 f945 	bl	8003948 <HAL_TIM_PWM_Start_IT>
		};
 80006be:	e007      	b.n	80006d0 <_ZN3PWM7triggerEb+0x34>
			status == true ? HAL_TIM_PWM_Start_IT(tim,ch): HAL_TIM_PWM_Stop(tim,ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4610      	mov	r0, r2
 80006cc:	f003 f8cc 	bl	8003868 <HAL_TIM_PWM_Stop>
		};
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN3PWM4DutyEi>:

		inline void Duty(int pulse){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
			__HAL_TIM_SET_COMPARE(tim,ch,pulse);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d105      	bne.n	80006f6 <_ZN3PWM4DutyEi+0x1e>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
		};
 80006f4:	e018      	b.n	8000728 <_ZN3PWM4DutyEi+0x50>
			__HAL_TIM_SET_COMPARE(tim,ch,pulse);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d105      	bne.n	800070a <_ZN3PWM4DutyEi+0x32>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	639a      	str	r2, [r3, #56]	; 0x38
		};
 8000708:	e00e      	b.n	8000728 <_ZN3PWM4DutyEi+0x50>
			__HAL_TIM_SET_COMPARE(tim,ch,pulse);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	2b08      	cmp	r3, #8
 8000710:	d105      	bne.n	800071e <_ZN3PWM4DutyEi+0x46>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
		};
 800071c:	e004      	b.n	8000728 <_ZN3PWM4DutyEi+0x50>
			__HAL_TIM_SET_COMPARE(tim,ch,pulse);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	641a      	str	r2, [r3, #64]	; 0x40
		};
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <_ZN3PWM5fDutyEf>:

		//range 0.0 ~ 1.0
		inline HAL_StatusTypeDef fDuty(float pfDuty){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	ed87 0a00 	vstr	s0, [r7]
			if(!(0 <= pfDuty && pfDuty <= 1)) return HAL_ERROR;
 8000740:	edd7 7a00 	vldr	s15, [r7]
 8000744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074c:	bfac      	ite	ge
 800074e:	2301      	movge	r3, #1
 8000750:	2300      	movlt	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d110      	bne.n	8000780 <_ZN3PWM5fDutyEf+0x4c>
 800075e:	edd7 7a00 	vldr	s15, [r7]
 8000762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076e:	bf94      	ite	ls
 8000770:	2301      	movls	r3, #1
 8000772:	2300      	movhi	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <_ZN3PWM5fDutyEf+0x50>
 8000780:	2301      	movs	r3, #1
 8000782:	e013      	b.n	80007ac <_ZN3PWM5fDutyEf+0x78>
			int pDuty = pfDuty * (float)mTimeReload;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000790:	edd7 7a00 	vldr	s15, [r7]
 8000794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079c:	ee17 3a90 	vmov	r3, s15
 80007a0:	60fb      	str	r3, [r7, #12]
			Duty(pDuty);
 80007a2:	68f9      	ldr	r1, [r7, #12]
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff97 	bl	80006d8 <_ZN3PWM4DutyEi>
			return HAL_OK;
 80007aa:	2300      	movs	r3, #0
		};
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_ZNK3PWM9getPiriodEv>:
			Duty(pDuty);
			return HAL_OK;
		};

		inline int16_t getPre() const{ return pre; }
		inline uint32_t getPiriod() const{ return mTimeReload; }
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <_ZNK3PWM8getClockEv>:
		inline uint32_t getClock() const{ return MasterClock; }
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <_ZN3PWM12setPrescalerEt>:

		inline void setPrescaler(const uint16_t pre_){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
			pre = pre_;
 80007f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	81da      	strh	r2, [r3, #14]
			__HAL_TIM_SET_PRESCALER(tim,pre_);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	887a      	ldrh	r2, [r7, #2]
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
		}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <_ZN3PWM9setPiriodEt>:

		inline void setPiriod(const uint16_t pTimeReload){
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	807b      	strh	r3, [r7, #2]
			mTimeReload = pTimeReload;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	887a      	ldrh	r2, [r7, #2]
 800081e:	819a      	strh	r2, [r3, #12]
			__HAL_TIM_SET_AUTORELOAD(tim,mTimeReload);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	899a      	ldrh	r2, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899a      	ldrh	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	60da      	str	r2, [r3, #12]
		}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <_ZN3PWMD1Ev>:

		~PWM(){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <_ZN3PWMD1Ev+0x1c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]

		};
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	080058a0 	.word	0x080058a0

08000864 <_ZN3PWMC1ERKS_>:
class PWM{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <_ZN3PWMC1ERKS_+0x48>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	899a      	ldrh	r2, [r3, #12]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	819a      	strh	r2, [r3, #12]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	81da      	strh	r2, [r3, #14]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	080058a0 	.word	0x080058a0

080008b0 <_ZN5servoC1E3PWMtt>:
};

class servo{
public:
	servo() = delete;
	servo(PWM _MyPWM,uint16_t _max_us = 2100,uint16_t _min_us = 900):esc(_MyPWM),max_us(_max_us),min_us(_min_us){
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	460b      	mov	r3, r1
 80008c0:	80fb      	strh	r3, [r7, #6]
 80008c2:	4613      	mov	r3, r2
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffca 	bl	8000864 <_ZN3PWMC1ERKS_>
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	829a      	strh	r2, [r3, #20]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	82da      	strh	r2, [r3, #22]
		esc.setPiriod(10000);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f242 7110 	movw	r1, #10000	; 0x2710
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff93 	bl	800080e <_ZN3PWM9setPiriodEt>
		esc.setPrescaler(((esc.getClock() / esc.getPiriod()) / freaqency));
 80008e8:	68fc      	ldr	r4, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff6d 	bl	80007cc <_ZNK3PWM8getClockEv>
 80008f2:	4605      	mov	r5, r0
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff5c 	bl	80007b4 <_ZNK3PWM9getPiriodEv>
 80008fc:	4603      	mov	r3, r0
 80008fe:	fbb5 f3f3 	udiv	r3, r5, r3
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <_ZN5servoC1E3PWMtt+0x70>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	091b      	lsrs	r3, r3, #4
 800090a:	b29b      	uxth	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	4620      	mov	r0, r4
 8000910:	f7ff ff68 	bl	80007e4 <_ZN3PWM12setPrescalerEt>
	}
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	51eb851f 	.word	0x51eb851f

08000924 <_ZN5servo7setTimeEt>:

	inline void setTime(uint16_t us){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
		esc.trigger(false);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff feb1 	bl	800069c <_ZN3PWM7triggerEb>
		if((min_us <= us) && (us <= max_us)){
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	8adb      	ldrh	r3, [r3, #22]
 800093e:	887a      	ldrh	r2, [r7, #2]
 8000940:	429a      	cmp	r2, r3
 8000942:	d31e      	bcc.n	8000982 <_ZN5servo7setTimeEt+0x5e>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	8a9b      	ldrh	r3, [r3, #20]
 8000948:	887a      	ldrh	r2, [r7, #2]
 800094a:	429a      	cmp	r2, r3
 800094c:	d819      	bhi.n	8000982 <_ZN5servo7setTimeEt+0x5e>
			latest_us = us;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	887a      	ldrh	r2, [r7, #2]
 8000952:	831a      	strh	r2, [r3, #24]
			float param = static_cast<float>(us) / 10000;
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800095e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000994 <_ZN5servo7setTimeEt+0x70>
 8000962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000966:	edc7 7a03 	vstr	s15, [r7, #12]
			esc.fDuty(param / 2);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000970:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000978:	eeb0 0a47 	vmov.f32	s0, s14
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fed9 	bl	8000734 <_ZN3PWM5fDutyEf>
		}
		esc.trigger(true);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe88 	bl	800069c <_ZN3PWM7triggerEb>
	};
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	461c4000 	.word	0x461c4000

08000998 <_ZN6SerialC1E20__UART_HandleTypeDefmmmm>:
#define	_LONGLONG_t		long long	/* Platform dependent long long integer type */

class Serial{
	public:
		Serial() = delete;
		Serial(UART_HandleTypeDef _huart,
 8000998:	b084      	sub	sp, #16
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	f107 0014 	add.w	r0, r7, #20
 80009a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				uint32_t _baudrate = 115200,
				uint32_t _Wordlength = UART_WORDLENGTH_8B,
				uint32_t _StopBits = UART_STOPBITS_1,
				uint32_t _Parity = UART_PARITY_NONE
		 ): huart(_huart),baudrate(_baudrate),Wordlength(_Wordlength),StopBits(_StopBits),Parity(_Parity){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <_ZN6SerialC1E20__UART_HandleTypeDefmmmm+0xb4>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	4611      	mov	r1, r2
 80009b2:	2358      	movs	r3, #88	; 0x58
 80009b4:	461a      	mov	r2, r3
 80009b6:	f004 ff21 	bl	80057fc <memcpy>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3358      	adds	r3, #88	; 0x58
 80009be:	f107 0114 	add.w	r1, r7, #20
 80009c2:	2244      	movs	r2, #68	; 0x44
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 ff19 	bl	80057fc <memcpy>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	33ac      	adds	r3, #172	; 0xac
 80009ee:	2264      	movs	r2, #100	; 0x64
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 ff10 	bl	8005818 <memset>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			huart.Init.BaudRate = _baudrate;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a0c:	65da      	str	r2, [r3, #92]	; 0x5c
			huart.Init.WordLength = _Wordlength;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a12:	661a      	str	r2, [r3, #96]	; 0x60
			huart.Init.StopBits = _StopBits;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a18:	665a      	str	r2, [r3, #100]	; 0x64
			huart.Init.Parity = _Parity;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a1e:	669a      	str	r2, [r3, #104]	; 0x68

			HAL_UART_Init(&huart);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3358      	adds	r3, #88	; 0x58
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fe69 	bl	80046fc <HAL_UART_Init>
			HAL_UART_Receive_DMA(&huart,serialData,DATANUM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	33ac      	adds	r3, #172	; 0xac
 8000a34:	2264      	movs	r2, #100	; 0x64
 8000a36:	4619      	mov	r1, r3
 8000a38:	f003 fead 	bl	8004796 <HAL_UART_Receive_DMA>
		};
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr
 8000a4c:	08005840 	.word	0x08005840

08000a50 <_ZN6Serial9availableEv>:

		UART_HandleTypeDef getHandle(){
			return huart;
		};

		uint8_t available(){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
			uint8_t index = DATANUM - huart.hdmarx->Instance->NDTR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000a68:	73fb      	strb	r3, [r7, #15]
			uint8_t remainData = index - indexRead;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f9b3 3110 	ldrsh.w	r3, [r3, #272]	; 0x110
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	73bb      	strb	r3, [r7, #14]
			return remainData;
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
		};
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_ZN6Serial4readEv>:

		uint8_t read(){
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
			uint8_t readData = serialData[indexRead];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f9b3 3110 	ldrsh.w	r3, [r3, #272]	; 0x110
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8000a9e:	73fb      	strb	r3, [r7, #15]
			indexRead++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f9b3 3110 	ldrsh.w	r3, [r3, #272]	; 0x110
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
			if(indexRead >= DATANUM) indexRead = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f9b3 3110 	ldrsh.w	r3, [r3, #272]	; 0x110
 8000aba:	2b63      	cmp	r3, #99	; 0x63
 8000abc:	dd03      	ble.n	8000ac6 <_ZN6Serial4readEv+0x40>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
			return readData;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
		};
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8000ada:	af12      	add	r7, sp, #72	; 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000adc:	f001 f89a 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 fb48 	bl	8001174 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff fd32 	bl	800054c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ae8:	f000 ff54 	bl	8001994 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000aec:	f000 fc42 	bl	8001374 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000af0:	f000 fd0e 	bl	8001510 <MX_TIM2_Init>
  MX_DMA_Init();
 8000af4:	f7ff fd02 	bl	80004fc <MX_DMA_Init>
  MX_UART4_Init();
 8000af8:	f000 ff22 	bl	8001940 <MX_UART4_Init>
  MX_TIM3_Init();
 8000afc:	f000 fd94 	bl	8001628 <MX_TIM3_Init>
		  {&htim2,TIM_CHANNEL_1,10000,84,timMode::APB2},
		  {&htim2,TIM_CHANNEL_3,10000,84,timMode::APB2},
		  {&htim3,TIM_CHANNEL_1,10000,84,timMode::APB2},
		  {&htim3,TIM_CHANNEL_2,10000,84,timMode::APB2},
		  {&htim3,TIM_CHANNEL_3,10000,84,timMode::APB2},
  };
 8000b00:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8000b04:	2300      	movs	r3, #0
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2354      	movs	r3, #84	; 0x54
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b14:	220c      	movs	r2, #12
 8000b16:	49dd      	ldr	r1, [pc, #884]	; (8000e8c <main+0x3b8>)
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f7ff fd85 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000b1e:	3414      	adds	r4, #20
 8000b20:	2300      	movs	r3, #0
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	2354      	movs	r3, #84	; 0x54
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b30:	2208      	movs	r2, #8
 8000b32:	49d6      	ldr	r1, [pc, #856]	; (8000e8c <main+0x3b8>)
 8000b34:	4620      	mov	r0, r4
 8000b36:	f7ff fd77 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000b3a:	3414      	adds	r4, #20
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2301      	movs	r3, #1
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	2354      	movs	r3, #84	; 0x54
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	49cf      	ldr	r1, [pc, #828]	; (8000e8c <main+0x3b8>)
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff fd69 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000b56:	3414      	adds	r4, #20
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	2354      	movs	r3, #84	; 0x54
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b68:	2204      	movs	r2, #4
 8000b6a:	49c9      	ldr	r1, [pc, #804]	; (8000e90 <main+0x3bc>)
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f7ff fd5b 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000b72:	3414      	adds	r4, #20
 8000b74:	2300      	movs	r3, #0
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	2354      	movs	r3, #84	; 0x54
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b84:	2200      	movs	r2, #0
 8000b86:	49c2      	ldr	r1, [pc, #776]	; (8000e90 <main+0x3bc>)
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f7ff fd4d 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000b8e:	3414      	adds	r4, #20
 8000b90:	2300      	movs	r3, #0
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2301      	movs	r3, #1
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	2354      	movs	r3, #84	; 0x54
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	49bb      	ldr	r1, [pc, #748]	; (8000e90 <main+0x3bc>)
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f7ff fd3f 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000baa:	3414      	adds	r4, #20
 8000bac:	2300      	movs	r3, #0
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2354      	movs	r3, #84	; 0x54
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	49b5      	ldr	r1, [pc, #724]	; (8000e94 <main+0x3c0>)
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fd31 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000bc6:	3414      	adds	r4, #20
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	2354      	movs	r3, #84	; 0x54
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bd8:	2204      	movs	r2, #4
 8000bda:	49ae      	ldr	r1, [pc, #696]	; (8000e94 <main+0x3c0>)
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f7ff fd23 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
 8000be2:	f104 0014 	add.w	r0, r4, #20
 8000be6:	2300      	movs	r3, #0
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	2354      	movs	r3, #84	; 0x54
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	49a6      	ldr	r1, [pc, #664]	; (8000e94 <main+0x3c0>)
 8000bfa:	f7ff fd15 	bl	8000628 <_ZN3PWMC1EP17TIM_HandleTypeDefmts7timModeb>
		  pwm[4],
		  pwm[5],
		  pwm[6],
		  pwm[7],
		  pwm[8],
  };
 8000bfe:	f507 7411 	add.w	r4, r7, #580	; 0x244
 8000c02:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8000c06:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe29 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000c12:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 8000c16:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000c1a:	f640 0234 	movw	r2, #2100	; 0x834
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff fe46 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000c24:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe0b 	bl	8000844 <_ZN3PWMD1Ev>
 8000c2e:	341c      	adds	r4, #28
 8000c30:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000c34:	f103 0214 	add.w	r2, r3, #20
 8000c38:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe10 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000c44:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000c48:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000c4c:	f640 0234 	movw	r2, #2100	; 0x834
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fe2d 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000c56:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdf2 	bl	8000844 <_ZN3PWMD1Ev>
 8000c60:	341c      	adds	r4, #28
 8000c62:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000c66:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000c6a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fdf7 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000c76:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 8000c7a:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000c7e:	f640 0234 	movw	r2, #2100	; 0x834
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fe14 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000c88:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fdd9 	bl	8000844 <_ZN3PWMD1Ev>
 8000c92:	341c      	adds	r4, #28
 8000c94:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000c98:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000c9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdde 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000ca8:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8000cac:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000cb0:	f640 0234 	movw	r2, #2100	; 0x834
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f7ff fdfb 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000cba:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fdc0 	bl	8000844 <_ZN3PWMD1Ev>
 8000cc4:	341c      	adds	r4, #28
 8000cc6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000cca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000cce:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdc5 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000cda:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8000cde:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000ce2:	f640 0234 	movw	r2, #2100	; 0x834
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff fde2 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000cec:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fda7 	bl	8000844 <_ZN3PWMD1Ev>
 8000cf6:	341c      	adds	r4, #28
 8000cf8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000cfc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d00:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdac 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000d0c:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8000d10:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000d14:	f640 0234 	movw	r2, #2100	; 0x834
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff fdc9 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000d1e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd8e 	bl	8000844 <_ZN3PWMD1Ev>
 8000d28:	341c      	adds	r4, #28
 8000d2a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000d2e:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000d32:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd93 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000d3e:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 8000d42:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000d46:	f640 0234 	movw	r2, #2100	; 0x834
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fdb0 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000d50:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd75 	bl	8000844 <_ZN3PWMD1Ev>
 8000d5a:	341c      	adds	r4, #28
 8000d5c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000d60:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8000d64:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd7a 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000d70:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8000d74:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000d78:	f640 0234 	movw	r2, #2100	; 0x834
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff fd97 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000d82:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fd5c 	bl	8000844 <_ZN3PWMD1Ev>
 8000d8c:	341c      	adds	r4, #28
 8000d8e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000d92:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8000d96:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fd61 	bl	8000864 <_ZN3PWMC1ERKS_>
 8000da2:	f207 4194 	addw	r1, r7, #1172	; 0x494
 8000da6:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000daa:	f640 0234 	movw	r2, #2100	; 0x834
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff fd7e 	bl	80008b0 <_ZN5servoC1E3PWMtt>
 8000db4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fd43 	bl	8000844 <_ZN3PWMD1Ev>

  Serial stm32(huart4, 115200);
 8000dbe:	4e36      	ldr	r6, [pc, #216]	; (8000e98 <main+0x3c4>)
 8000dc0:	f507 7c94 	add.w	ip, r7, #296	; 0x128
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9311      	str	r3, [sp, #68]	; 0x44
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9310      	str	r3, [sp, #64]	; 0x40
 8000dcc:	2300      	movs	r3, #0
 8000dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8000dd0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8000dd6:	466d      	mov	r5, sp
 8000dd8:	f106 040c 	add.w	r4, r6, #12
 8000ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000df4:	4660      	mov	r0, ip
 8000df6:	f7ff fdcf 	bl	8000998 <_ZN6SerialC1E20__UART_HandleTypeDefmmmm>
  Serial serial(huart2, 115200);
 8000dfa:	4e28      	ldr	r6, [pc, #160]	; (8000e9c <main+0x3c8>)
 8000dfc:	f107 0c10 	add.w	ip, r7, #16
 8000e00:	2300      	movs	r3, #0
 8000e02:	9311      	str	r3, [sp, #68]	; 0x44
 8000e04:	2300      	movs	r3, #0
 8000e06:	9310      	str	r3, [sp, #64]	; 0x40
 8000e08:	2300      	movs	r3, #0
 8000e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e10:	930e      	str	r3, [sp, #56]	; 0x38
 8000e12:	466d      	mov	r5, sp
 8000e14:	f106 040c 	add.w	r4, r6, #12
 8000e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e2c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e30:	4660      	mov	r0, ip
 8000e32:	f7ff fdb1 	bl	8000998 <_ZN6SerialC1E20__UART_HandleTypeDefmmmm>

  uint8_t buf[DATA]={0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	801a      	strh	r2, [r3, #0]
  Button button;
  uint8_t move = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
  uint16_t injec = 150;
 8000e44:	2396      	movs	r3, #150	; 0x96
 8000e46:	f8a7 34aa 	strh.w	r3, [r7, #1194]	; 0x4aa
  uint8_t angle_LR = 50;
 8000e4a:	2332      	movs	r3, #50	; 0x32
 8000e4c:	f887 34a9 	strb.w	r3, [r7, #1193]	; 0x4a9
  uint8_t angle_UD = 50;
 8000e50:	2332      	movs	r3, #50	; 0x32
 8000e52:	f887 34a8 	strb.w	r3, [r7, #1192]	; 0x4a8


  for (int i = 0; i < 9; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000e5c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	dc1d      	bgt.n	8000ea0 <main+0x3cc>
  {
	  motor[i].setTime(1500);
 8000e64:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8000e68:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fd52 	bl	8000924 <_ZN5servo7setTimeEt>
  for (int i = 0; i < 9; i++)
 8000e80:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000e84:	3301      	adds	r3, #1
 8000e86:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000e8a:	e7e7      	b.n	8000e5c <main+0x388>
 8000e8c:	20000070 	.word	0x20000070
 8000e90:	200000b8 	.word	0x200000b8
 8000e94:	20000028 	.word	0x20000028
 8000e98:	20000160 	.word	0x20000160
 8000e9c:	200001a4 	.word	0x200001a4
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (stm32.available() > DATA)
 8000ea0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fdd3 	bl	8000a50 <_ZN6Serial9availableEv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	bf8c      	ite	hi
 8000eb0:	2301      	movhi	r3, #1
 8000eb2:	2300      	movls	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f2      	beq.n	8000ea0 <main+0x3cc>
	  {
		  for (int i = 0; i < DATA; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000ec0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	dc13      	bgt.n	8000ef0 <main+0x41c>
		  {
			  buf[i]=stm32.read();
 8000ec8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fdda 	bl	8000a86 <_ZN6Serial4readEv>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f107 020c 	add.w	r2, r7, #12
 8000eda:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000ede:	4413      	add	r3, r2
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < DATA; i++)
 8000ee4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000eee:	e7e7      	b.n	8000ec0 <main+0x3ec>
		  }


		  button.up 	= (buf[1] & UP) 	>> 0;
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	463b      	mov	r3, r7
 8000efe:	701a      	strb	r2, [r3, #0]
		  button.down 	= (buf[1] & DOWN) 	>> 1;
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	105b      	asrs	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	463b      	mov	r3, r7
 8000f12:	705a      	strb	r2, [r3, #1]
		  button.right 	= (buf[1] & RIGHT)	>> 2;
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	785b      	ldrb	r3, [r3, #1]
 8000f1a:	109b      	asrs	r3, r3, #2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	463b      	mov	r3, r7
 8000f26:	709a      	strb	r2, [r3, #2]
		  button.left 	= (buf[1] & LEFT) 	>> 3;
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	10db      	asrs	r3, r3, #3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	463b      	mov	r3, r7
 8000f3a:	70da      	strb	r2, [r3, #3]
		  button.tri 	= (buf[1] & TRI) 	>> 4;
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	111b      	asrs	r3, r3, #4
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	711a      	strb	r2, [r3, #4]
		  button.cro	= (buf[1] & CRO) 	>> 5;
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	115b      	asrs	r3, r3, #5
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	463b      	mov	r3, r7
 8000f62:	715a      	strb	r2, [r3, #5]
		  button.cir	= (buf[1] & CIR) 	>> 6;
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	119b      	asrs	r3, r3, #6
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	463b      	mov	r3, r7
 8000f76:	719a      	strb	r2, [r3, #6]
		  button.sqr	= (buf[0] & SQR) 	>> 0;
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	463b      	mov	r3, r7
 8000f86:	71da      	strb	r2, [r3, #7]
		  button.l1		= (buf[0] & L1) 	>> 1;
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	105b      	asrs	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	463b      	mov	r3, r7
 8000f9a:	721a      	strb	r2, [r3, #8]
		  button.l2		= (buf[0] & L2) 	>> 2;
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	109b      	asrs	r3, r3, #2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	463b      	mov	r3, r7
 8000fae:	725a      	strb	r2, [r3, #9]
		  button.r1		= (buf[0] & R1) 	>> 3;
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	10db      	asrs	r3, r3, #3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	729a      	strb	r2, [r3, #10]
		  button.r2		= (buf[0] & R2) 	>> 4;
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	111b      	asrs	r3, r3, #4
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	72da      	strb	r2, [r3, #11]

		  if(button.cir && !move)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	799b      	ldrb	r3, [r3, #6]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d038      	beq.n	8001052 <main+0x57e>
 8000fe0:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d134      	bne.n	8001052 <main+0x57e>
		  {
			  move = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7

			  for (int i = 0; i < 1; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8000ff4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dc75      	bgt.n	80010e8 <main+0x614>
			  {
				  for(int pulse = 1500 + injec; pulse <= 1900; pulse += 3)
 8000ffc:	f8b7 34aa 	ldrh.w	r3, [r7, #1194]	; 0x4aa
 8001000:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001004:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8001008:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800100c:	f240 726c 	movw	r2, #1900	; 0x76c
 8001010:	4293      	cmp	r3, r2
 8001012:	dc18      	bgt.n	8001046 <main+0x572>
				  {
					  HAL_Delay(6);
 8001014:	2006      	movs	r0, #6
 8001016:	f000 fe6f 	bl	8001cf8 <HAL_Delay>
					  motor[i].setTime(pulse);
 800101a:	f507 7111 	add.w	r1, r7, #580	; 0x244
 800101e:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8001030:	b292      	uxth	r2, r2
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fc75 	bl	8000924 <_ZN5servo7setTimeEt>
				  for(int pulse = 1500 + injec; pulse <= 1900; pulse += 3)
 800103a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800103e:	3303      	adds	r3, #3
 8001040:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8001044:	e7e0      	b.n	8001008 <main+0x534>
			  for (int i = 0; i < 1; i++)
 8001046:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800104a:	3301      	adds	r3, #1
 800104c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8001050:	e7d0      	b.n	8000ff4 <main+0x520>
				  }
			  }
		  }

		  else if (button.cro && move)
 8001052:	463b      	mov	r3, r7
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d047      	beq.n	80010ea <main+0x616>
 800105a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800105e:	2b00      	cmp	r3, #0
 8001060:	d043      	beq.n	80010ea <main+0x616>
		  {
			  move = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
			  for(int i = 0; i < 6; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800106e:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8001072:	2b05      	cmp	r3, #5
 8001074:	dc39      	bgt.n	80010ea <main+0x616>
			  {
				  for(int pulse = 1900; pulse >= 1500 + injec; pulse -= 3)
 8001076:	f240 736c 	movw	r3, #1900	; 0x76c
 800107a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800107e:	f8b7 34aa 	ldrh.w	r3, [r7, #1194]	; 0x4aa
 8001082:	f203 53db 	addw	r3, r3, #1499	; 0x5db
 8001086:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 800108a:	429a      	cmp	r2, r3
 800108c:	dd18      	ble.n	80010c0 <main+0x5ec>
				  {
						  HAL_Delay(6);
 800108e:	2006      	movs	r0, #6
 8001090:	f000 fe32 	bl	8001cf8 <HAL_Delay>
						  motor[i].setTime(pulse);
 8001094:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8001098:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 80010aa:	b292      	uxth	r2, r2
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc38 	bl	8000924 <_ZN5servo7setTimeEt>
				  for(int pulse = 1900; pulse >= 1500 + injec; pulse -= 3)
 80010b4:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80010b8:	3b03      	subs	r3, #3
 80010ba:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80010be:	e7de      	b.n	800107e <main+0x5aa>
				  }
				  motor[i].setTime(1500);
 80010c0:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80010c4:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc24 	bl	8000924 <_ZN5servo7setTimeEt>
			  for(int i = 0; i < 6; i++)
 80010dc:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80010e0:	3301      	adds	r3, #1
 80010e2:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80010e6:	e7c2      	b.n	800106e <main+0x59a>
			  }
 80010e8:	bf00      	nop
			  }
		  }

		  if(button.left)
 80010ea:	463b      	mov	r3, r7
 80010ec:	78db      	ldrb	r3, [r3, #3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <main+0x630>
		  {
//			  for(int pulse = 1500 + angle_LR; pulse <= 1700; pulse += 3)
//			  {
//				  motor[ANGLE_LR].setTime(pulse);
//			  }
			  motor[ANGLE_LR].setTime(1600);
 80010f2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80010f6:	33e0      	adds	r3, #224	; 0xe0
 80010f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc11 	bl	8000924 <_ZN5servo7setTimeEt>
 8001102:	e014      	b.n	800112e <main+0x65a>
		  }

		  else if(button.right)
 8001104:	463b      	mov	r3, r7
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <main+0x64a>
//			  for(int pulse = 1900; pulse >= 1500 + injec; pulse -= 3)
//			  {
//					  HAL_Delay(6);
//					  motor[ANGLE_LR].setTime(pulse);
//			  }
			  motor[ANGLE_LR].setTime(1300);
 800110c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001110:	33e0      	adds	r3, #224	; 0xe0
 8001112:	f240 5114 	movw	r1, #1300	; 0x514
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fc04 	bl	8000924 <_ZN5servo7setTimeEt>
 800111c:	e007      	b.n	800112e <main+0x65a>
		  }

		  else
			  motor[ANGLE_LR].setTime(1500);
 800111e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001122:	33e0      	adds	r3, #224	; 0xe0
 8001124:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fbfb 	bl	8000924 <_ZN5servo7setTimeEt>

		  if(button.up)
 800112e:	463b      	mov	r3, r7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <main+0x674>
		  {
//			  for(int pulse = 1500 + angle_LR; pulse <= 1700; pulse += 3)
//			  {
//				  motor[ANGLE_LR].setTime(pulse);
//			  }
			  motor[ANGLE_UD].setTime(1600);
 8001136:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800113a:	33c4      	adds	r3, #196	; 0xc4
 800113c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fbef 	bl	8000924 <_ZN5servo7setTimeEt>
 8001146:	e6ab      	b.n	8000ea0 <main+0x3cc>
		  }

		  else if(button.down)
 8001148:	463b      	mov	r3, r7
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <main+0x68e>
//			  for(int pulse = 1900; pulse >= 1500 + injec; pulse -= 3)
//			  {
//					  HAL_Delay(6);
//					  motor[ANGLE_LR].setTime(pulse);
//			  }
			  motor[ANGLE_UD].setTime(1300);
 8001150:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001154:	33c4      	adds	r3, #196	; 0xc4
 8001156:	f240 5114 	movw	r1, #1300	; 0x514
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fbe2 	bl	8000924 <_ZN5servo7setTimeEt>
 8001160:	e69e      	b.n	8000ea0 <main+0x3cc>
		  }
		  else

			  motor[ANGLE_UD].setTime(1500);
 8001162:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001166:	33c4      	adds	r3, #196	; 0xc4
 8001168:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fbd9 	bl	8000924 <_ZN5servo7setTimeEt>
//		  }
//	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001172:	e695      	b.n	8000ea0 <main+0x3cc>

08001174 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2234      	movs	r2, #52	; 0x34
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fb48 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <_Z18SystemClock_Configv+0xe8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a2e      	ldr	r2, [pc, #184]	; (800125c <_Z18SystemClock_Configv+0xe8>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <_Z18SystemClock_Configv+0xe8>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <_Z18SystemClock_Configv+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <_Z18SystemClock_Configv+0xec>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <_Z18SystemClock_Configv+0xec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e8:	2310      	movs	r3, #16
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ff2a 	bl	800305c <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001218:	f000 f824 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2102      	movs	r1, #2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fc43 	bl	8002ac4 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800124e:	f000 f809 	bl	8001264 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_MspInit+0x4c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_MspInit+0x4c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ae:	2007      	movs	r0, #7
 80012b0:	f000 fe16 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 fcd4 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <DMA1_Stream2_IRQHandler+0x10>)
 800131a:	f000 ffbb 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000100 	.word	0x20000100

08001328 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA1_Stream4_IRQHandler+0x10>)
 800132e:	f000 ffb1 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001e8 	.word	0x200001e8

0800133c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <UART4_IRQHandler+0x10>)
 8001342:	f003 fa59 	bl	80047f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000160 	.word	0x20000160

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b096      	sub	sp, #88	; 0x58
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fa33 	bl	8005818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <MX_TIM1_Init+0x194>)
 80013b4:	4a55      	ldr	r2, [pc, #340]	; (800150c <MX_TIM1_Init+0x198>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <MX_TIM1_Init+0x194>)
 80013ba:	2254      	movs	r2, #84	; 0x54
 80013bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <MX_TIM1_Init+0x194>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <MX_TIM1_Init+0x194>)
 80013c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80013ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <MX_TIM1_Init+0x194>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <MX_TIM1_Init+0x194>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <MX_TIM1_Init+0x194>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013de:	484a      	ldr	r0, [pc, #296]	; (8001508 <MX_TIM1_Init+0x194>)
 80013e0:	f002 f8da 	bl	8003598 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013ea:	f7ff ff3b 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f8:	4619      	mov	r1, r3
 80013fa:	4843      	ldr	r0, [pc, #268]	; (8001508 <MX_TIM1_Init+0x194>)
 80013fc:	f002 fcd8 	bl	8003db0 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001406:	f7ff ff2d 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800140a:	483f      	ldr	r0, [pc, #252]	; (8001508 <MX_TIM1_Init+0x194>)
 800140c:	f002 f984 	bl	8003718 <HAL_TIM_OC_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001416:	f7ff ff25 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141a:	483b      	ldr	r0, [pc, #236]	; (8001508 <MX_TIM1_Init+0x194>)
 800141c:	f002 f9d5 	bl	80037ca <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001426:	f7ff ff1d 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001436:	4619      	mov	r1, r3
 8001438:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_TIM1_Init+0x194>)
 800143a:	f003 f891 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001444:	f7ff ff0e 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4826      	ldr	r0, [pc, #152]	; (8001508 <MX_TIM1_Init+0x194>)
 800146e:	f002 fb81 	bl	8003b74 <HAL_TIM_OC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001478:	f7ff fef4 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2204      	movs	r2, #4
 8001486:	4619      	mov	r1, r3
 8001488:	481f      	ldr	r0, [pc, #124]	; (8001508 <MX_TIM1_Init+0x194>)
 800148a:	f002 fbcf 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001494:	f7ff fee6 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2208      	movs	r2, #8
 800149e:	4619      	mov	r1, r3
 80014a0:	4819      	ldr	r0, [pc, #100]	; (8001508 <MX_TIM1_Init+0x194>)
 80014a2:	f002 fbc3 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80014ac:	f7ff feda 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	220c      	movs	r2, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	4813      	ldr	r0, [pc, #76]	; (8001508 <MX_TIM1_Init+0x194>)
 80014ba:	f002 fbb7 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80014c4:	f7ff fece 	bl	8001264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM1_Init+0x194>)
 80014ec:	f003 f8b4 	bl	8004658 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80014f6:	f7ff feb5 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM1_Init+0x194>)
 80014fc:	f000 f95c 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 8001500:	bf00      	nop
 8001502:	3758      	adds	r7, #88	; 0x58
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000070 	.word	0x20000070
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <MX_TIM2_Init+0x114>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <MX_TIM2_Init+0x114>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <MX_TIM2_Init+0x114>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <MX_TIM2_Init+0x114>)
 8001556:	f04f 32ff 	mov.w	r2, #4294967295
 800155a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <MX_TIM2_Init+0x114>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_TIM2_Init+0x114>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001568:	482e      	ldr	r0, [pc, #184]	; (8001624 <MX_TIM2_Init+0x114>)
 800156a:	f002 f815 	bl	8003598 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001574:	f7ff fe76 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	4619      	mov	r1, r3
 8001584:	4827      	ldr	r0, [pc, #156]	; (8001624 <MX_TIM2_Init+0x114>)
 8001586:	f002 fc13 	bl	8003db0 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001590:	f7ff fe68 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001594:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_TIM2_Init+0x114>)
 8001596:	f002 f918 	bl	80037ca <HAL_TIM_PWM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015a0:	f7ff fe60 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4619      	mov	r1, r3
 80015b2:	481c      	ldr	r0, [pc, #112]	; (8001624 <MX_TIM2_Init+0x114>)
 80015b4:	f002 ffd4 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015be:	f7ff fe51 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	; 0x60
 80015c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <MX_TIM2_Init+0x114>)
 80015da:	f002 fb27 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015e4:	f7ff fe3e 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2204      	movs	r2, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_TIM2_Init+0x114>)
 80015f0:	f002 fb1c 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015fa:	f7ff fe33 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2208      	movs	r2, #8
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM2_Init+0x114>)
 8001606:	f002 fb11 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001610:	f7ff fe28 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM2_Init+0x114>)
 8001616:	f000 f8cf 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	; 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000b8 	.word	0x200000b8

08001628 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <MX_TIM3_Init+0xd8>)
 800164c:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <MX_TIM3_Init+0xdc>)
 800164e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <MX_TIM3_Init+0xd8>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <MX_TIM3_Init+0xd8>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_TIM3_Init+0xd8>)
 800165e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_TIM3_Init+0xd8>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_TIM3_Init+0xd8>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <MX_TIM3_Init+0xd8>)
 8001672:	f002 f8aa 	bl	80037ca <HAL_TIM_PWM_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800167c:	f7ff fdf2 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4619      	mov	r1, r3
 800168e:	481c      	ldr	r0, [pc, #112]	; (8001700 <MX_TIM3_Init+0xd8>)
 8001690:	f002 ff66 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800169a:	f7ff fde3 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169e:	2360      	movs	r3, #96	; 0x60
 80016a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <MX_TIM3_Init+0xd8>)
 80016b6:	f002 fab9 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016c0:	f7ff fdd0 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2204      	movs	r2, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM3_Init+0xd8>)
 80016cc:	f002 faae 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016d6:	f7ff fdc5 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2208      	movs	r2, #8
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM3_Init+0xd8>)
 80016e2:	f002 faa3 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80016ec:	f7ff fdba 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM3_Init+0xd8>)
 80016f2:	f000 f861 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000028 	.word	0x20000028
 8001704:	40000400 	.word	0x40000400

08001708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a15      	ldr	r2, [pc, #84]	; (800176c <HAL_TIM_Base_MspInit+0x64>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001736:	e012      	b.n	800175e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d10d      	bne.n	800175e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40010000 	.word	0x40010000
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10d      	bne.n	80017a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_TIM_PWM_MspInit+0x40>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_TIM_PWM_MspInit+0x40>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_TIM_PWM_MspInit+0x40>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a55      	ldr	r2, [pc, #340]	; (800192c <HAL_TIM_MspPostInit+0x174>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11f      	bne.n	800181a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	4b54      	ldr	r3, [pc, #336]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a53      	ldr	r2, [pc, #332]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4848      	ldr	r0, [pc, #288]	; (8001934 <HAL_TIM_MspPostInit+0x17c>)
 8001814:	f000 ffa8 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001818:	e083      	b.n	8001922 <HAL_TIM_MspPostInit+0x16a>
  else if(timHandle->Instance==TIM2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001822:	d13d      	bne.n	80018a0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a40      	ldr	r2, [pc, #256]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a39      	ldr	r2, [pc, #228]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	482f      	ldr	r0, [pc, #188]	; (8001934 <HAL_TIM_MspPostInit+0x17c>)
 8001878:	f000 ff76 	bl	8002768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188e:	2301      	movs	r3, #1
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <HAL_TIM_MspPostInit+0x180>)
 800189a:	f000 ff65 	bl	8002768 <HAL_GPIO_Init>
}
 800189e:	e040      	b.n	8001922 <HAL_TIM_MspPostInit+0x16a>
  else if(timHandle->Instance==TIM3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_TIM_MspPostInit+0x184>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d13b      	bne.n	8001922 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_TIM_MspPostInit+0x178>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <HAL_TIM_MspPostInit+0x17c>)
 80018fe:	f000 ff33 	bl	8002768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001912:	2302      	movs	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <HAL_TIM_MspPostInit+0x180>)
 800191e:	f000 ff23 	bl	8002768 <HAL_GPIO_Init>
}
 8001922:	bf00      	nop
 8001924:	3730      	adds	r7, #48	; 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40010000 	.word	0x40010000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020400 	.word	0x40020400
 800193c:	40000400 	.word	0x40000400

08001940 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_UART4_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <MX_UART4_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_UART4_Init+0x4c>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_UART4_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_UART4_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_UART4_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_UART4_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_UART4_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_UART4_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_UART4_Init+0x4c>)
 8001978:	f002 fec0 	bl	80046fc <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001982:	f7ff fc6f 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000160 	.word	0x20000160
 8001990:	40004c00 	.word	0x40004c00

08001994 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <MX_USART2_UART_Init+0x50>)
 800199c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART2_UART_Init+0x4c>)
 80019cc:	f002 fe96 	bl	80046fc <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019d6:	f7ff fc45 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001a4 	.word	0x200001a4
 80019e4:	40004400 	.word	0x40004400

080019e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_UART_MspInit+0x1b4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f040 8093 	bne.w	8001b32 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a62      	ldr	r2, [pc, #392]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a5b      	ldr	r2, [pc, #364]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a56:	2308      	movs	r3, #8
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4850      	ldr	r0, [pc, #320]	; (8001ba4 <HAL_UART_MspInit+0x1bc>)
 8001a62:	f000 fe81 	bl	8002768 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001a66:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <HAL_UART_MspInit+0x1c4>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a80:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a86:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8e:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001aa8:	483f      	ldr	r0, [pc, #252]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001aaa:	f000 fa5b 	bl	8001f64 <HAL_DMA_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001ab4:	f7ff fbd6 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001ac6:	4a3b      	ldr	r2, [pc, #236]	; (8001bb4 <HAL_UART_MspInit+0x1cc>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001acc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001b06:	f000 fa2d 	bl	8001f64 <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001b10:	f7ff fba8 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1a:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_UART_MspInit+0x1c8>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2034      	movs	r0, #52	; 0x34
 8001b26:	f000 f9e6 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b2a:	2034      	movs	r0, #52	; 0x34
 8001b2c:	f000 f9ff 	bl	8001f2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b30:	e030      	b.n	8001b94 <HAL_UART_MspInit+0x1ac>
  else if(uartHandle->Instance==USART2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d12b      	bne.n	8001b94 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6313      	str	r3, [r2, #48]	; 0x30
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b74:	230c      	movs	r3, #12
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b84:	2307      	movs	r3, #7
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <HAL_UART_MspInit+0x1d4>)
 8001b90:	f000 fdea 	bl	8002768 <HAL_GPIO_Init>
}
 8001b94:	bf00      	nop
 8001b96:	3730      	adds	r7, #48	; 0x30
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40004c00 	.word	0x40004c00
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	20000100 	.word	0x20000100
 8001bac:	40026040 	.word	0x40026040
 8001bb0:	200001e8 	.word	0x200001e8
 8001bb4:	40026070 	.word	0x40026070
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bea:	f7ff fbb1 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f003 fde1 	bl	80057b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7fe ff6f 	bl	8000ad4 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c04:	080058d4 	.word	0x080058d4
  ldr r2, =_sbss
 8001c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c0c:	2000024c 	.word	0x2000024c

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f94f 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fb12 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f967 	bl	8001f4a <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f92f 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000248 	.word	0x20000248

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000248 	.word	0x20000248

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff3e 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff31 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffa2 	bl	8001e9c <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff feb6 	bl	8001ce0 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e099      	b.n	80020b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	e00f      	b.n	8001fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa2:	f7ff fe9d 	bl	8001ce0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d908      	bls.n	8001fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e078      	b.n	80020b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e8      	bne.n	8001fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_DMA_Init+0x158>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b04      	cmp	r3, #4
 8002054:	d117      	bne.n	8002086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb01 	bl	8002670 <DMA_CheckFifoParam>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002082:	2301      	movs	r3, #1
 8002084:	e016      	b.n	80020b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fab8 	bl	8002604 <DMA_CalcBaseAndBitshift>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	223f      	movs	r2, #63	; 0x3f
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	f010803f 	.word	0xf010803f

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Start_IT+0x26>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e040      	b.n	8002168 <HAL_DMA_Start_IT+0xa8>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12f      	bne.n	800215a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa4a 	bl	80025a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	223f      	movs	r2, #63	; 0x3f
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0216 	orr.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff fdaf 	bl	8001ce0 <HAL_GetTick>
 8002182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e052      	b.n	8002248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_Abort+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	e013      	b.n	800221c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff fd74 	bl	8001ce0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d90c      	bls.n	800221c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e015      	b.n	8002248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	223f      	movs	r2, #63	; 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00c      	b.n	8002288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2205      	movs	r2, #5
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_DMA_IRQHandler+0x258>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_DMA_IRQHandler+0x25c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0204 	bic.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	2204      	movs	r2, #4
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2210      	movs	r2, #16
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2210      	movs	r2, #16
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e01f      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e016      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0208 	bic.w	r2, r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2220      	movs	r2, #32
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 808e 	beq.w	8002532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8086 	beq.w	8002532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2220      	movs	r2, #32
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b05      	cmp	r3, #5
 800243c:	d136      	bne.n	80024ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0216 	bic.w	r2, r2, #22
 800244c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_DMA_IRQHandler+0x1da>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	223f      	movs	r2, #63	; 0x3f
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07d      	beq.n	800259e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
        }
        return;
 80024aa:	e078      	b.n	800259e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01c      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d030      	beq.n	8002532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e02b      	b.n	8002532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d027      	beq.n	8002532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e022      	b.n	8002532 <HAL_DMA_IRQHandler+0x29e>
 80024ec:	20000000 	.word	0x20000000
 80024f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0210 	bic.w	r2, r2, #16
 8002510:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	2b00      	cmp	r3, #0
 8002538:	d032      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d022      	beq.n	800258c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2205      	movs	r2, #5
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	429a      	cmp	r2, r3
 8002568:	d307      	bcc.n	800257a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f2      	bne.n	800255e <HAL_DMA_IRQHandler+0x2ca>
 8002578:	e000      	b.n	800257c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800257a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e000      	b.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800259e:	bf00      	nop
    }
  }
}
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop

080025a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d108      	bne.n	80025e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025e6:	e007      	b.n	80025f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3b10      	subs	r3, #16
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <DMA_CalcBaseAndBitshift+0x64>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <DMA_CalcBaseAndBitshift+0x68>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d909      	bls.n	8002646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
 8002644:	e007      	b.n	8002656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	aaaaaaab 	.word	0xaaaaaaab
 800266c:	080058bc 	.word	0x080058bc

08002670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11f      	bne.n	80026ca <DMA_CheckFifoParam+0x5a>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d856      	bhi.n	800273e <DMA_CheckFifoParam+0xce>
 8002690:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <DMA_CheckFifoParam+0x28>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026a9 	.word	0x080026a9
 800269c:	080026bb 	.word	0x080026bb
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	0800273f 	.word	0x0800273f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d046      	beq.n	8002742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e043      	b.n	8002742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c2:	d140      	bne.n	8002746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c8:	e03d      	b.n	8002746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d2:	d121      	bne.n	8002718 <DMA_CheckFifoParam+0xa8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d837      	bhi.n	800274a <DMA_CheckFifoParam+0xda>
 80026da:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <DMA_CheckFifoParam+0x70>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	080026f7 	.word	0x080026f7
 80026e8:	080026f1 	.word	0x080026f1
 80026ec:	08002709 	.word	0x08002709
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e030      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d025      	beq.n	800274e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e022      	b.n	800274e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002716:	e01c      	b.n	8002752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d903      	bls.n	8002726 <DMA_CheckFifoParam+0xb6>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d003      	beq.n	800272c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002724:	e018      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      break;
 800272a:	e015      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e00b      	b.n	8002756 <DMA_CheckFifoParam+0xe6>
      break;
 800273e:	bf00      	nop
 8002740:	e00a      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e008      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e006      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e004      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e002      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;   
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
    }
  } 
  
  return status; 
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e165      	b.n	8002a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8154 	bne.w	8002a4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80ae 	beq.w	8002a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_GPIO_Init+0x300>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a5c      	ldr	r2, [pc, #368]	; (8002a68 <HAL_GPIO_Init+0x300>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <HAL_GPIO_Init+0x300>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290a:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_GPIO_Init+0x304>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x308>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x21a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x30c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x216>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x310>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x212>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x314>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x20e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x318>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x20a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x31c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x206>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_GPIO_Init+0x320>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x202>
 8002966:	2306      	movs	r3, #6
 8002968:	e00c      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 800296a:	2307      	movs	r3, #7
 800296c:	e00a      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 800296e:	2305      	movs	r3, #5
 8002970:	e008      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 8002972:	2304      	movs	r3, #4
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 8002976:	2303      	movs	r3, #3
 8002978:	e004      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 800297a:	2302      	movs	r3, #2
 800297c:	e002      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x21c>
 8002982:	2300      	movs	r3, #0
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f002 0203 	and.w	r2, r2, #3
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	4093      	lsls	r3, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002994:	4935      	ldr	r1, [pc, #212]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_GPIO_Init+0x324>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_GPIO_Init+0x324>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <HAL_GPIO_Init+0x324>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <HAL_GPIO_Init+0x324>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_GPIO_Init+0x324>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_GPIO_Init+0x324>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_GPIO_Init+0x324>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a44:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_GPIO_Init+0x324>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	f67f ae96 	bls.w	8002784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cc      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90c      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d044      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e067      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4934      	ldr	r1, [pc, #208]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff f894 	bl	8001ce0 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7ff f890 	bl	8001ce0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d20c      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f855 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fff4 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080058a4 	.word	0x080058a4
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	080058b4 	.word	0x080058b4

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	080058b4 	.word	0x080058b4

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b088      	sub	sp, #32
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	4bce      	ldr	r3, [pc, #824]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f200 818d 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x344>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	0800303d 	.word	0x0800303d
 8002d30:	0800303d 	.word	0x0800303d
 8002d34:	0800303d 	.word	0x0800303d
 8002d38:	08002d63 	.word	0x08002d63
 8002d3c:	0800303d 	.word	0x0800303d
 8002d40:	0800303d 	.word	0x0800303d
 8002d44:	0800303d 	.word	0x0800303d
 8002d48:	08002d69 	.word	0x08002d69
 8002d4c:	0800303d 	.word	0x0800303d
 8002d50:	0800303d 	.word	0x0800303d
 8002d54:	0800303d 	.word	0x0800303d
 8002d58:	08002edd 	.word	0x08002edd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4bbd      	ldr	r3, [pc, #756]	; (8003054 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5e:	61bb      	str	r3, [r7, #24]
       break;
 8002d60:	e16f      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4bbd      	ldr	r3, [pc, #756]	; (8003058 <HAL_RCC_GetSysClockFreq+0x360>)
 8002d64:	61bb      	str	r3, [r7, #24]
      break;
 8002d66:	e16c      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4bb9      	ldr	r3, [pc, #740]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d72:	4bb7      	ldr	r3, [pc, #732]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d053      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4bb4      	ldr	r3, [pc, #720]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	461a      	mov	r2, r3
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	ea02 0400 	and.w	r4, r2, r0
 8002d96:	603c      	str	r4, [r7, #0]
 8002d98:	400b      	ands	r3, r1
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	014b      	lsls	r3, r1, #5
 8002dae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002db2:	0142      	lsls	r2, r0, #5
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	4623      	mov	r3, r4
 8002dba:	1ac0      	subs	r0, r0, r3
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	018b      	lsls	r3, r1, #6
 8002dcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dd0:	0182      	lsls	r2, r0, #6
 8002dd2:	1a12      	subs	r2, r2, r0
 8002dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	00d9      	lsls	r1, r3, #3
 8002de2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de6:	00d0      	lsls	r0, r2, #3
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4621      	mov	r1, r4
 8002dee:	1852      	adds	r2, r2, r1
 8002df0:	4629      	mov	r1, r5
 8002df2:	eb43 0101 	adc.w	r1, r3, r1
 8002df6:	460b      	mov	r3, r1
 8002df8:	f04f 0000 	mov.w	r0, #0
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	0259      	lsls	r1, r3, #9
 8002e02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e06:	0250      	lsls	r0, r2, #9
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	f7fd f9f4 	bl	8000204 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e04c      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	ea02 0a00 	and.w	sl, r2, r0
 8002e3e:	ea03 0b01 	and.w	fp, r3, r1
 8002e42:	4650      	mov	r0, sl
 8002e44:	4659      	mov	r1, fp
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	014b      	lsls	r3, r1, #5
 8002e50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e54:	0142      	lsls	r2, r0, #5
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	ebb0 000a 	subs.w	r0, r0, sl
 8002e5e:	eb61 010b 	sbc.w	r1, r1, fp
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	018b      	lsls	r3, r1, #6
 8002e6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e70:	0182      	lsls	r2, r0, #6
 8002e72:	1a12      	subs	r2, r2, r0
 8002e74:	eb63 0301 	sbc.w	r3, r3, r1
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	00d9      	lsls	r1, r3, #3
 8002e82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e86:	00d0      	lsls	r0, r2, #3
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	eb12 020a 	adds.w	r2, r2, sl
 8002e90:	eb43 030b 	adc.w	r3, r3, fp
 8002e94:	f04f 0000 	mov.w	r0, #0
 8002e98:	f04f 0100 	mov.w	r1, #0
 8002e9c:	0299      	lsls	r1, r3, #10
 8002e9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ea2:	0290      	lsls	r0, r2, #10
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	f7fd f9a6 	bl	8000204 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec0:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	61bb      	str	r3, [r7, #24]
      break;
 8002eda:	e0b2      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002edc:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d04d      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	ea02 0800 	and.w	r8, r2, r0
 8002f0a:	ea03 0901 	and.w	r9, r3, r1
 8002f0e:	4640      	mov	r0, r8
 8002f10:	4649      	mov	r1, r9
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	014b      	lsls	r3, r1, #5
 8002f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f20:	0142      	lsls	r2, r0, #5
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	ebb0 0008 	subs.w	r0, r0, r8
 8002f2a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f3c:	0182      	lsls	r2, r0, #6
 8002f3e:	1a12      	subs	r2, r2, r0
 8002f40:	eb63 0301 	sbc.w	r3, r3, r1
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	00d9      	lsls	r1, r3, #3
 8002f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f52:	00d0      	lsls	r0, r2, #3
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	eb12 0208 	adds.w	r2, r2, r8
 8002f5c:	eb43 0309 	adc.w	r3, r3, r9
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0259      	lsls	r1, r3, #9
 8002f6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f6e:	0250      	lsls	r0, r2, #9
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f7fd f940 	bl	8000204 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e04a      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	461a      	mov	r2, r3
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	ea02 0400 	and.w	r4, r2, r0
 8002fa6:	ea03 0501 	and.w	r5, r3, r1
 8002faa:	4620      	mov	r0, r4
 8002fac:	4629      	mov	r1, r5
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	014b      	lsls	r3, r1, #5
 8002fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fbc:	0142      	lsls	r2, r0, #5
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	1b00      	subs	r0, r0, r4
 8002fc4:	eb61 0105 	sbc.w	r1, r1, r5
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	018b      	lsls	r3, r1, #6
 8002fd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd6:	0182      	lsls	r2, r0, #6
 8002fd8:	1a12      	subs	r2, r2, r0
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	f04f 0000 	mov.w	r0, #0
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	00d9      	lsls	r1, r3, #3
 8002fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fec:	00d0      	lsls	r0, r2, #3
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	1912      	adds	r2, r2, r4
 8002ff4:	eb45 0303 	adc.w	r3, r5, r3
 8002ff8:	f04f 0000 	mov.w	r0, #0
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	0299      	lsls	r1, r3, #10
 8003002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003006:	0290      	lsls	r0, r2, #10
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	461a      	mov	r2, r3
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f7fd f8f4 	bl	8000204 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0f1b      	lsrs	r3, r3, #28
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	61bb      	str	r3, [r7, #24]
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x35c>)
 800303e:	61bb      	str	r3, [r7, #24]
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	69bb      	ldr	r3, [r7, #24]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e28d      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8083 	beq.w	8003182 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800307c:	4b94      	ldr	r3, [pc, #592]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b04      	cmp	r3, #4
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003088:	4b91      	ldr	r3, [pc, #580]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003090:	2b08      	cmp	r3, #8
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003094:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d00c      	beq.n	80030bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d112      	bne.n	80030d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	4b84      	ldr	r3, [pc, #528]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05b      	beq.n	8003180 <HAL_RCC_OscConfig+0x124>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d157      	bne.n	8003180 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e25a      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x90>
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xcc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xb4>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xcc>
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fdd6 	bl	8001ce0 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fdd2 	bl	8001ce0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e21f      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xdc>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fdc2 	bl	8001ce0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fdbe 	bl	8001ce0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e20b      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x104>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06f      	beq.n	800326e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d11c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x186>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1d3      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e03a      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x278>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe fd6b 	bl	8001ce0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7fe fd67 	bl	8001ce0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e1b4      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4925      	ldr	r1, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x278>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fd4a 	bl	8001ce0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe fd46 	bl	8001ce0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e193      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d036      	beq.n	80032e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x27c>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe fd2a 	bl	8001ce0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7fe fd26 	bl	8001ce0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e173      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x274>)
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x234>
 80032ae:	e01b      	b.n	80032e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x27c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fd13 	bl	8001ce0 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00e      	b.n	80032dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe fd0f 	bl	8001ce0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d907      	bls.n	80032dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e15c      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470000 	.word	0x42470000
 80032d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ea      	bne.n	80032be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8097 	beq.w	8003424 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b79      	ldr	r3, [pc, #484]	; (800350c <HAL_RCC_OscConfig+0x4b0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003332:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x4b0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a75      	ldr	r2, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x4b0>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7fe fccf 	bl	8001ce0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fe fccb 	bl	8001ce0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e118      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_OscConfig+0x4b0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x31e>
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x358>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x340>
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a60      	ldr	r2, [pc, #384]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5d      	ldr	r2, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0x358>
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a59      	ldr	r2, [pc, #356]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe fc90 	bl	8001ce0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe fc8c 	bl	8001ce0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0d7      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ee      	beq.n	80033c4 <HAL_RCC_OscConfig+0x368>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe fc7a 	bl	8001ce0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe fc76 	bl	8001ce0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0c1      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003406:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ee      	bne.n	80033f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80ad 	beq.w	8003588 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b08      	cmp	r3, #8
 8003438:	d060      	beq.n	80034fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d145      	bne.n	80034ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x4b4>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fc4a 	bl	8001ce0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe fc46 	bl	8001ce0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e093      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4b4>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fc1b 	bl	8001ce0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fc17 	bl	8001ce0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e064      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x452>
 80034cc:	e05c      	b.n	8003588 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x4b4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fc04 	bl	8001ce0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fc00 	bl	8001ce0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04d      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x480>
 80034fa:	e045      	b.n	8003588 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e040      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0x538>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d030      	beq.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d129      	bne.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d122      	bne.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d119      	bne.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d10f      	bne.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d107      	bne.n	8003584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e041      	b.n	800362e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe f8a2 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fcb2 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04e      	b.n	80036ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_TIM_Base_Start_IT+0xc4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d01d      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_TIM_Base_Start_IT+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_TIM_Base_Start_IT+0xcc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIM_Base_Start_IT+0xd0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIM_Base_Start_IT+0xd4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_TIM_Base_Start_IT+0xd8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x80>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIM_Base_Start_IT+0xdc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d010      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e007      	b.n	80036ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40001800 	.word	0x40001800

08003718 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e041      	b.n	80037ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f839 	bl	80037b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fbf2 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e041      	b.n	8003860 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd ffbf 	bl	8001774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 fb99 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fe4a 	bl	8004514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_TIM_PWM_Stop+0xd8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_PWM_Stop+0x2c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <HAL_TIM_PWM_Stop+0xdc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_TIM_PWM_Stop+0x30>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_TIM_PWM_Stop+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_TIM_PWM_Stop+0x66>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f240 4344 	movw	r3, #1092	; 0x444
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_PWM_Stop+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x96>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f240 4344 	movw	r3, #1092	; 0x444
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x96>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Stop+0xa6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390c:	e013      	b.n	8003936 <HAL_TIM_PWM_Stop+0xce>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Stop+0xb6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	e00b      	b.n	8003936 <HAL_TIM_PWM_Stop+0xce>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Stop+0xc6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800392c:	e003      	b.n	8003936 <HAL_TIM_PWM_Stop+0xce>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400

08003948 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_TIM_PWM_Start_IT+0x28>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e022      	b.n	80039b6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b04      	cmp	r3, #4
 8003974:	d109      	bne.n	800398a <HAL_TIM_PWM_Start_IT+0x42>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e015      	b.n	80039b6 <HAL_TIM_PWM_Start_IT+0x6e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e008      	b.n	80039b6 <HAL_TIM_PWM_Start_IT+0x6e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0c7      	b.n	8003b4e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start_IT+0x86>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039cc:	e013      	b.n	80039f6 <HAL_TIM_PWM_Start_IT+0xae>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start_IT+0x96>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039dc:	e00b      	b.n	80039f6 <HAL_TIM_PWM_Start_IT+0xae>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start_IT+0xa6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	e003      	b.n	80039f6 <HAL_TIM_PWM_Start_IT+0xae>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d841      	bhi.n	8003a80 <HAL_TIM_PWM_Start_IT+0x138>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_TIM_PWM_Start_IT+0xbc>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a81 	.word	0x08003a81
 8003a0c:	08003a81 	.word	0x08003a81
 8003a10:	08003a81 	.word	0x08003a81
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	08003a81 	.word	0x08003a81
 8003a20:	08003a81 	.word	0x08003a81
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a81 	.word	0x08003a81
 8003a2c:	08003a81 	.word	0x08003a81
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a6f 	.word	0x08003a6f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0202 	orr.w	r2, r2, #2
 8003a46:	60da      	str	r2, [r3, #12]
      break;
 8003a48:	e01d      	b.n	8003a86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0204 	orr.w	r2, r2, #4
 8003a58:	60da      	str	r2, [r3, #12]
      break;
 8003a5a:	e014      	b.n	8003a86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0208 	orr.w	r2, r2, #8
 8003a6a:	60da      	str	r2, [r3, #12]
      break;
 8003a6c:	e00b      	b.n	8003a86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0210 	orr.w	r2, r2, #16
 8003a7c:	60da      	str	r2, [r3, #12]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15f      	bne.n	8003b4c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd3d 	bl	8004514 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	; (8003b58 <HAL_TIM_PWM_Start_IT+0x210>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIM_PWM_Start_IT+0x166>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <HAL_TIM_PWM_Start_IT+0x214>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PWM_Start_IT+0x16a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_PWM_Start_IT+0x16c>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_TIM_PWM_Start_IT+0x210>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d022      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d01d      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_TIM_PWM_Start_IT+0x218>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d018      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_TIM_PWM_Start_IT+0x220>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00e      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_TIM_PWM_Start_IT+0x214>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_TIM_PWM_Start_IT+0x224>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_TIM_PWM_Start_IT+0x228>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d111      	bne.n	8003b3c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d010      	beq.n	8003b4c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	e007      	b.n	8003b4c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40001800 	.word	0x40001800

08003b74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e048      	b.n	8003c24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d839      	bhi.n	8003c14 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003c15 	.word	0x08003c15
 8003bb0:	08003c15 	.word	0x08003c15
 8003bb4:	08003c15 	.word	0x08003c15
 8003bb8:	08003beb 	.word	0x08003beb
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003bf9 	.word	0x08003bf9
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c07 	.word	0x08003c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fa4c 	bl	8004080 <TIM_OC1_SetConfig>
      break;
 8003be8:	e017      	b.n	8003c1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fab5 	bl	8004160 <TIM_OC2_SetConfig>
      break;
 8003bf6:	e010      	b.n	8003c1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fb24 	bl	800424c <TIM_OC3_SetConfig>
      break;
 8003c04:	e009      	b.n	8003c1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fb91 	bl	8004334 <TIM_OC4_SetConfig>
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
      break;
 8003c18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0ae      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	f200 809f 	bhi.w	8003d98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003d99 	.word	0x08003d99
 8003c68:	08003d99 	.word	0x08003d99
 8003c6c:	08003d99 	.word	0x08003d99
 8003c70:	08003cd5 	.word	0x08003cd5
 8003c74:	08003d99 	.word	0x08003d99
 8003c78:	08003d99 	.word	0x08003d99
 8003c7c:	08003d99 	.word	0x08003d99
 8003c80:	08003d17 	.word	0x08003d17
 8003c84:	08003d99 	.word	0x08003d99
 8003c88:	08003d99 	.word	0x08003d99
 8003c8c:	08003d99 	.word	0x08003d99
 8003c90:	08003d57 	.word	0x08003d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f9f0 	bl	8004080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	619a      	str	r2, [r3, #24]
      break;
 8003cd2:	e064      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fa40 	bl	8004160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]
      break;
 8003d14:	e043      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fa95 	bl	800424c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0208 	orr.w	r2, r2, #8
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0204 	bic.w	r2, r2, #4
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
      break;
 8003d54:	e023      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fae9 	bl	8004334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIM_ConfigClockSource+0x1c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0b4      	b.n	8003f36 <HAL_TIM_ConfigClockSource+0x186>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d03e      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xd4>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	f200 8087 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	f000 8086 	beq.w	8003f22 <HAL_TIM_ConfigClockSource+0x172>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d87f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d01a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xa6>
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d87b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d050      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x11a>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d877      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d03c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xfa>
 8003e30:	2b50      	cmp	r3, #80	; 0x50
 8003e32:	d873      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d058      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x13a>
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d86f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d064      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d86b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d060      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d867      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d05a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	e062      	b.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f000 fb35 	bl	80044d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	609a      	str	r2, [r3, #8]
      break;
 8003e82:	e04f      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f000 fb1e 	bl	80044d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea6:	609a      	str	r2, [r3, #8]
      break;
 8003ea8:	e03c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 fa92 	bl	80043e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2150      	movs	r1, #80	; 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 faeb 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e02c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 fab1 	bl	800443e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2160      	movs	r1, #96	; 0x60
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fadb 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e01c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fa72 	bl	80043e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 facb 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 fac2 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a40      	ldr	r2, [pc, #256]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3d      	ldr	r2, [pc, #244]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d027      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d023      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2b      	ldr	r2, [pc, #172]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <TIM_Base_SetConfig+0x128>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	; (8004070 <TIM_Base_SetConfig+0x130>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_Base_SetConfig+0x134>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a24      	ldr	r2, [pc, #144]	; (8004078 <TIM_Base_SetConfig+0x138>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <TIM_Base_SetConfig+0x13c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0xf8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	40001800 	.word	0x40001800
 8004078:	40001c00 	.word	0x40001c00
 800407c:	40002000 	.word	0x40002000

08004080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0302 	bic.w	r3, r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a20      	ldr	r2, [pc, #128]	; (8004158 <TIM_OC1_SetConfig+0xd8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC1_SetConfig+0x64>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1f      	ldr	r2, [pc, #124]	; (800415c <TIM_OC1_SetConfig+0xdc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10c      	bne.n	80040fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0308 	bic.w	r3, r3, #8
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC1_SetConfig+0xd8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC1_SetConfig+0x8e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC1_SetConfig+0xdc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d111      	bne.n	8004132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	40010000 	.word	0x40010000
 800415c:	40010400 	.word	0x40010400

08004160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0210 	bic.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0320 	bic.w	r3, r3, #32
 80041aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <TIM_OC2_SetConfig+0xe4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_OC2_SetConfig+0x68>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <TIM_OC2_SetConfig+0xe8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d10d      	bne.n	80041e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <TIM_OC2_SetConfig+0xe4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC2_SetConfig+0x94>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a16      	ldr	r2, [pc, #88]	; (8004248 <TIM_OC2_SetConfig+0xe8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d113      	bne.n	800421c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400

0800424c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <TIM_OC3_SetConfig+0xe0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_OC3_SetConfig+0x66>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <TIM_OC3_SetConfig+0xe4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10d      	bne.n	80042ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <TIM_OC3_SetConfig+0xe0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x92>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <TIM_OC3_SetConfig+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40010000 	.word	0x40010000
 8004330:	40010400 	.word	0x40010400

08004334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800437e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	031b      	lsls	r3, r3, #12
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <TIM_OC4_SetConfig+0xa4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC4_SetConfig+0x68>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a11      	ldr	r2, [pc, #68]	; (80043dc <TIM_OC4_SetConfig+0xa8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400

080043e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0201 	bic.w	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 030a 	bic.w	r3, r3, #10
 800441c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	031b      	lsls	r3, r3, #12
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f043 0307 	orr.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	021a      	lsls	r2, r3, #8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2201      	movs	r2, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e05a      	b.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d01d      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e03d      	b.n	80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e03f      	b.n	800478e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd f960 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fe6f 	bl	8005424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d11d      	bne.n	80047ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Receive_DMA+0x26>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e016      	b.n	80047ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Receive_DMA+0x38>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e00f      	b.n	80047ee <HAL_UART_Receive_DMA+0x58>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	461a      	mov	r2, r3
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fbc2 	bl	8004f6c <UART_Start_Receive_DMA>
 80047e8:	4603      	mov	r3, r0
 80047ea:	e000      	b.n	80047ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b0ba      	sub	sp, #232	; 0xe8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_UART_IRQHandler+0x66>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fd29 	bl	80052ae <UART_Receive_IT>
      return;
 800485c:	e256      	b.n	8004d0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800485e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80de 	beq.w	8004a24 <HAL_UART_IRQHandler+0x22c>
 8004868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004878:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80d1 	beq.w	8004a24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_UART_IRQHandler+0xae>
 800488e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_UART_IRQHandler+0xd2>
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0202 	orr.w	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_UART_IRQHandler+0xf6>
 80048d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0204 	orr.w	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d011      	beq.n	800491e <HAL_UART_IRQHandler+0x126>
 80048fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 81ed 	beq.w	8004d02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_UART_IRQHandler+0x14e>
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fcb4 	bl	80052ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_UART_IRQHandler+0x17a>
 800496a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04f      	beq.n	8004a12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fbbc 	bl	80050f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d141      	bne.n	8004a0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800499c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1d9      	bne.n	8004986 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d013      	beq.n	8004a02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4a7d      	ldr	r2, [pc, #500]	; (8004bd4 <HAL_UART_IRQHandler+0x3dc>)
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fc32 	bl	8002250 <HAL_DMA_Abort_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e00e      	b.n	8004a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9a4 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	e00a      	b.n	8004a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9a0 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e006      	b.n	8004a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f99c 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a1e:	e170      	b.n	8004d02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	bf00      	nop
    return;
 8004a22:	e16e      	b.n	8004d02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 814a 	bne.w	8004cc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8143 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 813c 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	f040 80b4 	bne.w	8004bd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8140 	beq.w	8004d06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	f080 8139 	bcs.w	8004d06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa6:	f000 8088 	beq.w	8004bba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1d9      	bne.n	8004aaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e1      	bne.n	8004af6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8a:	f023 0310 	bic.w	r3, r3, #16
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e3      	bne.n	8004b78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fd fadb 	bl	8002170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8ca 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bd0:	e099      	b.n	8004d06 <HAL_UART_IRQHandler+0x50e>
 8004bd2:	bf00      	nop
 8004bd4:	080051b7 	.word	0x080051b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 808b 	beq.w	8004d0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8086 	beq.w	8004d0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c22:	647a      	str	r2, [r7, #68]	; 0x44
 8004c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e3      	bne.n	8004bfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	623b      	str	r3, [r7, #32]
   return(result);
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e3      	bne.n	8004c36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	617b      	str	r3, [r7, #20]
   return(result);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e3      	bne.n	8004c7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f852 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cc0:	e023      	b.n	8004d0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x4ea>
 8004cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa7f 	bl	80051de <UART_Transmit_IT>
    return;
 8004ce0:	e014      	b.n	8004d0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <HAL_UART_IRQHandler+0x514>
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fabf 	bl	800527e <UART_EndTransmit_IT>
    return;
 8004d00:	e004      	b.n	8004d0c <HAL_UART_IRQHandler+0x514>
    return;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <HAL_UART_IRQHandler+0x514>
      return;
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <HAL_UART_IRQHandler+0x514>
      return;
 8004d0a:	bf00      	nop
  }
}
 8004d0c:	37e8      	adds	r7, #232	; 0xe8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b09c      	sub	sp, #112	; 0x70
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d172      	bne.n	8004e7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dc0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3314      	adds	r3, #20
 8004df0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004df2:	647a      	str	r2, [r7, #68]	; 0x44
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	623b      	str	r3, [r7, #32]
   return(result);
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e26:	633a      	str	r2, [r7, #48]	; 0x30
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d119      	bne.n	8004e7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e6a:	61fa      	str	r2, [r7, #28]
 8004e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	69b9      	ldr	r1, [r7, #24]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	617b      	str	r3, [r7, #20]
   return(result);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d106      	bne.n	8004e94 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e8e:	f7ff ff69 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e92:	e002      	b.n	8004e9a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004e94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e96:	f7ff ff47 	bl	8004d28 <HAL_UART_RxCpltCallback>
}
 8004e9a:	bf00      	nop
 8004e9c:	3770      	adds	r7, #112	; 0x70
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d108      	bne.n	8004eca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff ff4e 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ec8:	e002      	b.n	8004ed0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ff36 	bl	8004d3c <HAL_UART_RxHalfCpltCallback>
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b21      	cmp	r3, #33	; 0x21
 8004f0a:	d108      	bne.n	8004f1e <UART_DMAError+0x46>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f18:	68b8      	ldr	r0, [r7, #8]
 8004f1a:	f000 f8c1 	bl	80050a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b22      	cmp	r3, #34	; 0x22
 8004f3e:	d108      	bne.n	8004f52 <UART_DMAError+0x7a>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f000 f8cf 	bl	80050f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0210 	orr.w	r2, r3, #16
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5e:	68b8      	ldr	r0, [r7, #8]
 8004f60:	f7ff fef6 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b098      	sub	sp, #96	; 0x60
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2222      	movs	r2, #34	; 0x22
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	4a3e      	ldr	r2, [pc, #248]	; (8005094 <UART_Start_Receive_DMA+0x128>)
 8004f9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	4a3d      	ldr	r2, [pc, #244]	; (8005098 <UART_Start_Receive_DMA+0x12c>)
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	4a3c      	ldr	r2, [pc, #240]	; (800509c <UART_Start_Receive_DMA+0x130>)
 8004faa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	f7fd f878 	bl	80020c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	65bb      	str	r3, [r7, #88]	; 0x58
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800500e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800501c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e5      	bne.n	8004fee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	657b      	str	r3, [r7, #84]	; 0x54
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005042:	63ba      	str	r2, [r7, #56]	; 0x38
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3314      	adds	r3, #20
 800505c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	617b      	str	r3, [r7, #20]
   return(result);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800506c:	653b      	str	r3, [r7, #80]	; 0x50
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005076:	627a      	str	r2, [r7, #36]	; 0x24
 8005078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6a39      	ldr	r1, [r7, #32]
 800507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	61fb      	str	r3, [r7, #28]
   return(result);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3760      	adds	r7, #96	; 0x60
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	08004d7d 	.word	0x08004d7d
 8005098:	08004ea3 	.word	0x08004ea3
 800509c:	08004ed9 	.word	0x08004ed9

080050a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	; 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	61ba      	str	r2, [r7, #24]
 80050ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6979      	ldr	r1, [r7, #20]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	613b      	str	r3, [r7, #16]
   return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80050e4:	bf00      	nop
 80050e6:	3724      	adds	r7, #36	; 0x24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b095      	sub	sp, #84	; 0x54
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005118:	643a      	str	r2, [r7, #64]	; 0x40
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800511e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e5      	bne.n	80050f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	61fb      	str	r3, [r7, #28]
   return(result);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800514c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	2b01      	cmp	r3, #1
 8005166:	d119      	bne.n	800519c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	60bb      	str	r3, [r7, #8]
   return(result);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f023 0310 	bic.w	r3, r3, #16
 800517e:	647b      	str	r3, [r7, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005188:	61ba      	str	r2, [r7, #24]
 800518a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6979      	ldr	r1, [r7, #20]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	613b      	str	r3, [r7, #16]
   return(result);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051aa:	bf00      	nop
 80051ac:	3754      	adds	r7, #84	; 0x54
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff fdbd 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b21      	cmp	r3, #33	; 0x21
 80051f0:	d13e      	bne.n	8005270 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	d114      	bne.n	8005226 <UART_Transmit_IT+0x48>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d110      	bne.n	8005226 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]
 8005224:	e008      	b.n	8005238 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6211      	str	r1, [r2, #32]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4619      	mov	r1, r3
 8005246:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10f      	bne.n	800526c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e000      	b.n	8005272 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
  }
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005294:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fd38 	bl	8004d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08c      	sub	sp, #48	; 0x30
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b22      	cmp	r3, #34	; 0x22
 80052c0:	f040 80ab 	bne.w	800541a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052cc:	d117      	bne.n	80052fe <UART_Receive_IT+0x50>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d113      	bne.n	80052fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28
 80052fc:	e026      	b.n	800534c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005310:	d007      	beq.n	8005322 <UART_Receive_IT+0x74>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <UART_Receive_IT+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e008      	b.n	8005342 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533c:	b2da      	uxtb	r2, r3
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29b      	uxth	r3, r3
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4619      	mov	r1, r3
 800535a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800535c:	2b00      	cmp	r3, #0
 800535e:	d15a      	bne.n	8005416 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0220 	bic.w	r2, r2, #32
 800536e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800537e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b01      	cmp	r3, #1
 800539e:	d135      	bne.n	800540c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	613b      	str	r3, [r7, #16]
   return(result);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f023 0310 	bic.w	r3, r3, #16
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c6:	623a      	str	r2, [r7, #32]
 80053c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	69f9      	ldr	r1, [r7, #28]
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d10a      	bne.n	80053fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fcad 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
 800540a:	e002      	b.n	8005412 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fc8b 	bl	8004d28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	e002      	b.n	800541c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	b09f      	sub	sp, #124	; 0x7c
 800542a:	af00      	add	r7, sp, #0
 800542c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543a:	68d9      	ldr	r1, [r3, #12]
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	ea40 0301 	orr.w	r3, r0, r1
 8005444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	431a      	orrs	r2, r3
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	431a      	orrs	r2, r3
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4313      	orrs	r3, r2
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005468:	f021 010c 	bic.w	r1, r1, #12
 800546c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005472:	430b      	orrs	r3, r1
 8005474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	ea40 0301 	orr.w	r3, r0, r1
 800548c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4bc5      	ldr	r3, [pc, #788]	; (80057a8 <UART_SetConfig+0x384>)
 8005494:	429a      	cmp	r2, r3
 8005496:	d004      	beq.n	80054a2 <UART_SetConfig+0x7e>
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4bc3      	ldr	r3, [pc, #780]	; (80057ac <UART_SetConfig+0x388>)
 800549e:	429a      	cmp	r2, r3
 80054a0:	d103      	bne.n	80054aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a2:	f7fd fc15 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80054a6:	6778      	str	r0, [r7, #116]	; 0x74
 80054a8:	e002      	b.n	80054b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fd fbfd 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80054ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b8:	f040 80b6 	bne.w	8005628 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054be:	461c      	mov	r4, r3
 80054c0:	f04f 0500 	mov.w	r5, #0
 80054c4:	4622      	mov	r2, r4
 80054c6:	462b      	mov	r3, r5
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	6439      	str	r1, [r7, #64]	; 0x40
 80054cc:	415b      	adcs	r3, r3
 80054ce:	647b      	str	r3, [r7, #68]	; 0x44
 80054d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054d4:	1912      	adds	r2, r2, r4
 80054d6:	eb45 0303 	adc.w	r3, r5, r3
 80054da:	f04f 0000 	mov.w	r0, #0
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	00d9      	lsls	r1, r3, #3
 80054e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054e8:	00d0      	lsls	r0, r2, #3
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	1911      	adds	r1, r2, r4
 80054f0:	6639      	str	r1, [r7, #96]	; 0x60
 80054f2:	416b      	adcs	r3, r5
 80054f4:	667b      	str	r3, [r7, #100]	; 0x64
 80054f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	1891      	adds	r1, r2, r2
 8005502:	63b9      	str	r1, [r7, #56]	; 0x38
 8005504:	415b      	adcs	r3, r3
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800550c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005510:	f7fa fe78 	bl	8000204 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4ba5      	ldr	r3, [pc, #660]	; (80057b0 <UART_SetConfig+0x38c>)
 800551a:	fba3 2302 	umull	r2, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	011e      	lsls	r6, r3, #4
 8005522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005524:	461c      	mov	r4, r3
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	1891      	adds	r1, r2, r2
 8005530:	6339      	str	r1, [r7, #48]	; 0x30
 8005532:	415b      	adcs	r3, r3
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
 8005536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800553a:	1912      	adds	r2, r2, r4
 800553c:	eb45 0303 	adc.w	r3, r5, r3
 8005540:	f04f 0000 	mov.w	r0, #0
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	00d9      	lsls	r1, r3, #3
 800554a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800554e:	00d0      	lsls	r0, r2, #3
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	1911      	adds	r1, r2, r4
 8005556:	65b9      	str	r1, [r7, #88]	; 0x58
 8005558:	416b      	adcs	r3, r5
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	461a      	mov	r2, r3
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	1891      	adds	r1, r2, r2
 8005568:	62b9      	str	r1, [r7, #40]	; 0x28
 800556a:	415b      	adcs	r3, r3
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005572:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005576:	f7fa fe45 	bl	8000204 <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4b8c      	ldr	r3, [pc, #560]	; (80057b0 <UART_SetConfig+0x38c>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	2164      	movs	r1, #100	; 0x64
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	3332      	adds	r3, #50	; 0x32
 8005592:	4a87      	ldr	r2, [pc, #540]	; (80057b0 <UART_SetConfig+0x38c>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a0:	441e      	add	r6, r3
 80055a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a4:	4618      	mov	r0, r3
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	1894      	adds	r4, r2, r2
 80055b0:	623c      	str	r4, [r7, #32]
 80055b2:	415b      	adcs	r3, r3
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ba:	1812      	adds	r2, r2, r0
 80055bc:	eb41 0303 	adc.w	r3, r1, r3
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	f04f 0500 	mov.w	r5, #0
 80055c8:	00dd      	lsls	r5, r3, #3
 80055ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055ce:	00d4      	lsls	r4, r2, #3
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	1814      	adds	r4, r2, r0
 80055d6:	653c      	str	r4, [r7, #80]	; 0x50
 80055d8:	414b      	adcs	r3, r1
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
 80055dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	1891      	adds	r1, r2, r2
 80055e8:	61b9      	str	r1, [r7, #24]
 80055ea:	415b      	adcs	r3, r3
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055f6:	f7fa fe05 	bl	8000204 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b6c      	ldr	r3, [pc, #432]	; (80057b0 <UART_SetConfig+0x38c>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a67      	ldr	r2, [pc, #412]	; (80057b0 <UART_SetConfig+0x38c>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 0207 	and.w	r2, r3, #7
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4432      	add	r2, r6
 8005624:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005626:	e0b9      	b.n	800579c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562a:	461c      	mov	r4, r3
 800562c:	f04f 0500 	mov.w	r5, #0
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	1891      	adds	r1, r2, r2
 8005636:	6139      	str	r1, [r7, #16]
 8005638:	415b      	adcs	r3, r3
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005640:	1912      	adds	r2, r2, r4
 8005642:	eb45 0303 	adc.w	r3, r5, r3
 8005646:	f04f 0000 	mov.w	r0, #0
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	00d9      	lsls	r1, r3, #3
 8005650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005654:	00d0      	lsls	r0, r2, #3
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	eb12 0804 	adds.w	r8, r2, r4
 800565e:	eb43 0905 	adc.w	r9, r3, r5
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4618      	mov	r0, r3
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	008b      	lsls	r3, r1, #2
 8005676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800567a:	0082      	lsls	r2, r0, #2
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7fa fdc0 	bl	8000204 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <UART_SetConfig+0x38c>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011e      	lsls	r6, r3, #4
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	4618      	mov	r0, r3
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	1894      	adds	r4, r2, r2
 80056a0:	60bc      	str	r4, [r7, #8]
 80056a2:	415b      	adcs	r3, r3
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056aa:	1812      	adds	r2, r2, r0
 80056ac:	eb41 0303 	adc.w	r3, r1, r3
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	f04f 0500 	mov.w	r5, #0
 80056b8:	00dd      	lsls	r5, r3, #3
 80056ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056be:	00d4      	lsls	r4, r2, #3
 80056c0:	4622      	mov	r2, r4
 80056c2:	462b      	mov	r3, r5
 80056c4:	1814      	adds	r4, r2, r0
 80056c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80056c8:	414b      	adcs	r3, r1
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f04f 0100 	mov.w	r1, #0
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	008b      	lsls	r3, r1, #2
 80056e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056e4:	0082      	lsls	r2, r0, #2
 80056e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056ea:	f7fa fd8b 	bl	8000204 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <UART_SetConfig+0x38c>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	; 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <UART_SetConfig+0x38c>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005712:	441e      	add	r6, r3
 8005714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005716:	4618      	mov	r0, r3
 8005718:	f04f 0100 	mov.w	r1, #0
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	1894      	adds	r4, r2, r2
 8005722:	603c      	str	r4, [r7, #0]
 8005724:	415b      	adcs	r3, r3
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	1812      	adds	r2, r2, r0
 800572e:	eb41 0303 	adc.w	r3, r1, r3
 8005732:	f04f 0400 	mov.w	r4, #0
 8005736:	f04f 0500 	mov.w	r5, #0
 800573a:	00dd      	lsls	r5, r3, #3
 800573c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005740:	00d4      	lsls	r4, r2, #3
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	eb12 0a00 	adds.w	sl, r2, r0
 800574a:	eb43 0b01 	adc.w	fp, r3, r1
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f04f 0100 	mov.w	r1, #0
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	008b      	lsls	r3, r1, #2
 8005762:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005766:	0082      	lsls	r2, r0, #2
 8005768:	4650      	mov	r0, sl
 800576a:	4659      	mov	r1, fp
 800576c:	f7fa fd4a 	bl	8000204 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <UART_SetConfig+0x38c>)
 8005776:	fba3 1302 	umull	r1, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2164      	movs	r1, #100	; 0x64
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	3332      	adds	r3, #50	; 0x32
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <UART_SetConfig+0x38c>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4432      	add	r2, r6
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	377c      	adds	r7, #124	; 0x7c
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a6:	bf00      	nop
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	51eb851f 	.word	0x51eb851f

080057b4 <__libc_init_array>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4d0d      	ldr	r5, [pc, #52]	; (80057ec <__libc_init_array+0x38>)
 80057b8:	4c0d      	ldr	r4, [pc, #52]	; (80057f0 <__libc_init_array+0x3c>)
 80057ba:	1b64      	subs	r4, r4, r5
 80057bc:	10a4      	asrs	r4, r4, #2
 80057be:	2600      	movs	r6, #0
 80057c0:	42a6      	cmp	r6, r4
 80057c2:	d109      	bne.n	80057d8 <__libc_init_array+0x24>
 80057c4:	4d0b      	ldr	r5, [pc, #44]	; (80057f4 <__libc_init_array+0x40>)
 80057c6:	4c0c      	ldr	r4, [pc, #48]	; (80057f8 <__libc_init_array+0x44>)
 80057c8:	f000 f82e 	bl	8005828 <_init>
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	2600      	movs	r6, #0
 80057d2:	42a6      	cmp	r6, r4
 80057d4:	d105      	bne.n	80057e2 <__libc_init_array+0x2e>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057dc:	4798      	blx	r3
 80057de:	3601      	adds	r6, #1
 80057e0:	e7ee      	b.n	80057c0 <__libc_init_array+0xc>
 80057e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e6:	4798      	blx	r3
 80057e8:	3601      	adds	r6, #1
 80057ea:	e7f2      	b.n	80057d2 <__libc_init_array+0x1e>
 80057ec:	080058cc 	.word	0x080058cc
 80057f0:	080058cc 	.word	0x080058cc
 80057f4:	080058cc 	.word	0x080058cc
 80057f8:	080058d0 	.word	0x080058d0

080057fc <memcpy>:
 80057fc:	440a      	add	r2, r1
 80057fe:	4291      	cmp	r1, r2
 8005800:	f100 33ff 	add.w	r3, r0, #4294967295
 8005804:	d100      	bne.n	8005808 <memcpy+0xc>
 8005806:	4770      	bx	lr
 8005808:	b510      	push	{r4, lr}
 800580a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005812:	4291      	cmp	r1, r2
 8005814:	d1f9      	bne.n	800580a <memcpy+0xe>
 8005816:	bd10      	pop	{r4, pc}

08005818 <memset>:
 8005818:	4402      	add	r2, r0
 800581a:	4603      	mov	r3, r0
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	f803 1b01 	strb.w	r1, [r3], #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <_init>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

08005834 <_fini>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr
